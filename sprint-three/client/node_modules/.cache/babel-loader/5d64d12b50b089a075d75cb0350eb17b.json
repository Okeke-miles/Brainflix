{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\frank-okeke-brainflix\\\\frank-okeke-brainflix\\\\sprint-two\\\\src\\\\components\\\\MainVideoDisplay\\\\MainVideoDisplay.jsx\";\nimport React, { Component } from 'react';\nimport getDate from \"../../utils/getDate\";\nimport Comment from \"../Comments/Comment\";\nimport CommentDisplay from \"../CommentDisplay/CommentDisplay\";\nimport \"../../App.scss\";\nimport \"../MainVideoDisplay/MainVideoDisplay.scss\";\nimport like from \"../../assets/icons/Icon-likes.svg\";\nimport views from \"../../assets/icons/Icon-views.svg\";\nimport { API_KEY, API_URL } from \"../../utils/api\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass mainVideoDisplay extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mainVideoDisplay: null\n    };\n  }\n\n  //I create a function seeking to get a video id, using axios.get. This is the id of the video that will be displayed as the main video.\n  getVideoId(videoId) {\n    if (videoId === null) {\n      return false;\n    }\n\n    return axios.get(`${API_URL}videos/${videoId}?api_key=${API_KEY}`).then(res => {\n      this.setState({\n        mainVideoDisplay: res.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } //On mount lifecycle, I set videoid to the props which is passed from the videolist container. Therefore, on mount, the parameter for the function above will be set to the props being passed from the VideoList component.\n\n\n  componentDidMount() {\n    const {\n      videoId\n    } = this.props;\n    this.getVideoId(videoId);\n  } //On update lifecycle, a similar function is set, however this is only set if the props being passed from the VideoList component is not equal to the previous props.\n\n\n  componentDidUpdate(prevProps) {\n    const {\n      videoId\n    } = this.props;\n\n    if (videoId !== prevProps.videoId) {\n      this.getVideoId(videoId);\n    }\n  }\n\n  render() {\n    if (this.state.mainVideoDisplay === null) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loading__message\",\n        children: \"Please wait...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 20\n      }, this);\n    } //Deconstructed my state value in line with react best practices\n\n\n    const {\n      mainVideoDisplay\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      //I then render out pieces of my state to to layout my UI.\n      _jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selectedentry__style\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flexvideo-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              className: \"video-poster__style\",\n              height: \"800\",\n              poster: mainVideoDisplay.image,\n              controls: true,\n              children: /*#__PURE__*/_jsxDEV(\"source\", {\n                src: mainVideoDisplay.video\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 119\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-body__style\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"video-title__style\",\n                children: mainVideoDisplay.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mainvideo-container__style\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mainvideo-channel__container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"video-channel__style\",\n                    children: [\"By \", mainVideoDisplay.channel]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"video-timestamp__style\",\n                    children: [getDate(mainVideoDisplay.timestamp), \" ago\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 74,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"views__container\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                      className: \"views__style\",\n                      src: views,\n                      alt: \"views__icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 77,\n                      columnNumber: 42\n                    }, this), mainVideoDisplay.views]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 37\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                      className: \"likes__style\",\n                      src: like,\n                      alt: \"likes__icon\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 41\n                    }, this), mainVideoDisplay.likes]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 37\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"video-description__style\",\n                children: mainVideoDisplay.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"comment__number\",\n                  children: [mainVideoDisplay.comments.length, \" Comments\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(Comment, {\n                  videoId: mainVideoDisplay\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(CommentDisplay, {\n                  entry: mainVideoDisplay\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)\n      }, void 0, false)\n    );\n  }\n\n}\n\nexport default mainVideoDisplay;","map":{"version":3,"sources":["C:/Users/frank/Desktop/frank-okeke-brainflix/frank-okeke-brainflix/sprint-two/src/components/MainVideoDisplay/MainVideoDisplay.jsx"],"names":["React","Component","getDate","Comment","CommentDisplay","API_KEY","API_URL","axios","mainVideoDisplay","state","getVideoId","videoId","get","then","res","setState","data","catch","error","console","log","componentDidMount","props","componentDidUpdate","prevProps","render","image","video","title","channel","timestamp","views","like","likes","description","comments","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport getDate from \"../../utils/getDate\"\r\nimport Comment from \"../Comments/Comment\"\r\nimport CommentDisplay from \"../CommentDisplay/CommentDisplay\"\r\nimport \"../../App.scss\"\r\nimport \"../MainVideoDisplay/MainVideoDisplay.scss\";\r\nimport like from \"../../assets/icons/Icon-likes.svg\";\r\nimport views from \"../../assets/icons/Icon-views.svg\";\r\nimport {API_KEY, API_URL} from \"../../utils/api\";\r\nimport axios from \"axios\";\r\n\r\nclass mainVideoDisplay extends Component {\r\n//I set state for the main video to null, in the first instance.\r\n\r\n    state = {\r\n        mainVideoDisplay: null,\r\n    }\r\n    \r\n//I create a function seeking to get a video id, using axios.get. This is the id of the video that will be displayed as the main video.\r\n\r\n    getVideoId(videoId) {\r\n        if(videoId === null){\r\n            return false;\r\n          }\r\n        return axios.get(`${API_URL}videos/${videoId}?api_key=${API_KEY}`)\r\n        .then(res => {\r\n          this.setState({\r\n              mainVideoDisplay: res.data, \r\n          })\r\n        })\r\n        .catch(error=>{console.log(error)})\r\n    }\r\n     \r\n//On mount lifecycle, I set videoid to the props which is passed from the videolist container. Therefore, on mount, the parameter for the function above will be set to the props being passed from the VideoList component.\r\n\r\n    componentDidMount(){   \r\n      const { videoId } = this.props;\r\n     \r\n      this.getVideoId(videoId);\r\n    }\r\n\r\n//On update lifecycle, a similar function is set, however this is only set if the props being passed from the VideoList component is not equal to the previous props.\r\n\r\n    componentDidUpdate(prevProps){\r\n      const { videoId } = this.props;\r\n\r\n      if(videoId !== prevProps.videoId) {\r\n          this.getVideoId(videoId)\r\n      }\r\n    }\r\n    \r\n    render(){\r\n    \r\n        if (this.state.mainVideoDisplay===null){\r\n            return <p className=\"loading__message\">Please wait...</p>\r\n        }\r\n        \r\n//Deconstructed my state value in line with react best practices\r\n\r\n        const { mainVideoDisplay } = this.state\r\n    \r\n        return (\r\n//I then render out pieces of my state to to layout my UI.\r\n\r\n            <>\r\n                <div className=\"selectedentry__style\">\r\n                    <div className=\"flexvideo-container\">\r\n                        <video  className=\"video-poster__style\" height=\"800\" poster={ mainVideoDisplay.image}controls><source src={mainVideoDisplay.video}/></video>\r\n                        <div className=\"video-body__style\">\r\n                            <h3 className=\"video-title__style\">{mainVideoDisplay.title}</h3>\r\n                            <div className=\"mainvideo-container__style\">\r\n                                <div className=\"mainvideo-channel__container\">\r\n                                    <p className=\"video-channel__style\">By {mainVideoDisplay.channel}</p>\r\n                                    <p className=\"video-timestamp__style\">{getDate(mainVideoDisplay.timestamp)} ago</p>\r\n                                </div>\r\n                                <div className=\"views__container\">\r\n                                    <p > <img className=\"views__style\" src= {views} alt=\"views__icon\"/>{mainVideoDisplay.views}</p>\r\n                                    <p> <img className=\"likes__style\" src={like} alt=\"likes__icon\"/>{mainVideoDisplay.likes}</p>\r\n                                </div>\r\n                            </div>\r\n                            <p className=\"video-description__style\">{mainVideoDisplay.description}</p>\r\n                    \r\n                        <section>\r\n                          <p className=\"comment__number\">{mainVideoDisplay.comments.length} Comments</p>\r\n                          <Comment videoId = {mainVideoDisplay}/>\r\n                          <CommentDisplay entry={mainVideoDisplay} />\r\n                        </section>\r\n                </div>\r\n            </div>\r\n          </div>\r\n\r\n        </>\r\n                \r\n      )\r\n  }\r\n}\r\n\r\nexport default mainVideoDisplay\r\n"]},"metadata":{},"sourceType":"module"}