{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\frank\\\\Desktop\\\\frank-okeke-brainflix\\\\frank-okeke-brainflix\\\\sprint-two\\\\src\\\\components\\\\MainVideoDisplay\\\\MainVideoDisplay.jsx\";\nimport React, { Component } from 'react';\nimport getDate from \"../../utils/GetDate\";\nimport Comment from \"../Comments/Comment\";\nimport CommentDisplay from \"../CommentDisplay/CommentDisplay\";\nimport \"../../App.scss\";\nimport \"../MainVideoDisplay/MainVideoDisplay.scss\";\nimport like from \"../../assets/icons/Icon-likes.svg\";\nimport views from \"../../assets/icons/Icon-views.svg\";\nimport { API_KEY, API_URL } from \"../../utils/api\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass mainVideoDisplay extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mainVideoDisplay: null\n    };\n  }\n\n  //I create a function seeking to get a video id, using axios.get. This is the id of the video that will be displayed as the main video.\n  getVideoId(videoId) {\n    if (videoId === null) {\n      return false;\n    }\n\n    return axios.get(`${API_URL}videos/${videoId}?api_key=${API_KEY}`).then(res => {\n      this.setState({\n        mainVideoDisplay: res.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } //On mount lifecycle, I set videoid to the props which is passed from the videolist container. Therefore, on mount, the parameter for the function above will be set to the props being passed from the VideoList component.\n\n\n  componentDidMount() {\n    const {\n      videoId\n    } = this.props;\n    this.getVideoId(videoId);\n  } //On update lifecycle, a similar function is set, however this is only set if the props being passed from the VideoList component is not equal to the previous props.\n\n\n  componentDidUpdate(prevProps) {\n    const {\n      videoId\n    } = this.props;\n\n    if (videoId !== prevProps.videoId) {\n      this.getVideoId(videoId);\n    }\n  }\n\n  render() {\n    if (this.state.mainVideoDisplay === null) {\n      return \"\";\n    } //Deconstructed my state value in line with react best practices\n\n\n    const {\n      mainVideoDisplay\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectedentry__style\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flexvideo-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            className: \"video-poster__style\",\n            height: \"800\",\n            poster: mainVideoDisplay.image,\n            controls: true,\n            children: /*#__PURE__*/_jsxDEV(\"source\", {\n              src: mainVideoDisplay.video\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 119\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-body__style\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"video-title__style\",\n              children: mainVideoDisplay.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mainvideo-container__style\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mainvideo-channel__container\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"video-channel__style\",\n                  children: [\"By \", mainVideoDisplay.channel]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"video-timestamp__style\",\n                  children: [getDate(mainVideoDisplay.timestamp), \" ago\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"views__container\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"views__style\",\n                    src: views,\n                    alt: \"views__icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 42\n                  }, this), this.state.mainVideoDisplay.views]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n                    className: \"likes__style\",\n                    src: like,\n                    alt: \"likes__icon\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 41\n                  }, this), this.state.mainVideoDisplay.likes]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"video-description__style\",\n              children: this.state.mainVideoDisplay.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"comment__number\",\n                children: [this.state.mainVideoDisplay.comments.length, \" Comments\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(Comment, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(CommentDisplay, {\n                entry: this.state.mainVideoDisplay\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 27\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default mainVideoDisplay;","map":{"version":3,"sources":["C:/Users/frank/Desktop/frank-okeke-brainflix/frank-okeke-brainflix/sprint-two/src/components/MainVideoDisplay/MainVideoDisplay.jsx"],"names":["React","Component","getDate","Comment","CommentDisplay","API_KEY","API_URL","axios","mainVideoDisplay","state","getVideoId","videoId","get","then","res","setState","data","catch","error","console","log","componentDidMount","props","componentDidUpdate","prevProps","render","image","video","title","channel","timestamp","views","like","likes","description","comments","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport getDate from \"../../utils/GetDate\"\r\nimport Comment from \"../Comments/Comment\"\r\nimport CommentDisplay from \"../CommentDisplay/CommentDisplay\"\r\nimport \"../../App.scss\"\r\nimport \"../MainVideoDisplay/MainVideoDisplay.scss\";\r\nimport like from \"../../assets/icons/Icon-likes.svg\";\r\nimport views from \"../../assets/icons/Icon-views.svg\";\r\nimport {API_KEY, API_URL} from \"../../utils/api\";\r\nimport axios from \"axios\";\r\n\r\nclass mainVideoDisplay extends Component {\r\n//I set state for the main video to null, in the first instance.\r\n    state = {\r\n        mainVideoDisplay: null,\r\n    }\r\n    \r\n    //I create a function seeking to get a video id, using axios.get. This is the id of the video that will be displayed as the main video.\r\n    getVideoId(videoId) {\r\n        if(videoId === null){\r\n            return false;\r\n          }\r\n        return axios.get(`${API_URL}videos/${videoId}?api_key=${API_KEY}`)\r\n        .then(res => {\r\n          this.setState({\r\n              mainVideoDisplay: res.data, \r\n          })\r\n        })\r\n        .catch(error=>{console.log(error)})\r\n    }\r\n     \r\n    //On mount lifecycle, I set videoid to the props which is passed from the videolist container. Therefore, on mount, the parameter for the function above will be set to the props being passed from the VideoList component.\r\n    componentDidMount(){   \r\n      const { videoId } = this.props;\r\n     \r\n      this.getVideoId(videoId);\r\n    }\r\n\r\n    //On update lifecycle, a similar function is set, however this is only set if the props being passed from the VideoList component is not equal to the previous props.\r\n    componentDidUpdate(prevProps){\r\n      const { videoId } = this.props;\r\n\r\n      if(videoId !== prevProps.videoId) {\r\n          this.getVideoId(videoId)\r\n      }\r\n    }\r\n    \r\n    render(){\r\n    \r\n        if (this.state.mainVideoDisplay===null){\r\n            return \"\"\r\n        }\r\n        \r\n        //Deconstructed my state value in line with react best practices\r\n        const { mainVideoDisplay } = this.state\r\n    \r\n        return (\r\n            <>\r\n                <div className=\"selectedentry__style\">\r\n                    <div className=\"flexvideo-container\">\r\n                        <video  className=\"video-poster__style\" height=\"800\" poster={ mainVideoDisplay.image}controls><source src={mainVideoDisplay.video}/></video>\r\n                        <div className=\"video-body__style\">\r\n                            <h3 className=\"video-title__style\">{mainVideoDisplay.title}</h3>\r\n                            <div className=\"mainvideo-container__style\">\r\n                                <div className=\"mainvideo-channel__container\">\r\n                                    <p className=\"video-channel__style\">By {mainVideoDisplay.channel}</p>\r\n                                    <p className=\"video-timestamp__style\">{getDate(mainVideoDisplay.timestamp)} ago</p>\r\n                                </div>\r\n                                <div className=\"views__container\">\r\n                                    <p > <img className=\"views__style\" src= {views} alt=\"views__icon\"/>{this.state.mainVideoDisplay.views}</p>\r\n                                    <p> <img className=\"likes__style\" src={like} alt=\"likes__icon\"/>{this.state.mainVideoDisplay.likes}</p>\r\n                                </div>\r\n                            </div>\r\n                            <p className=\"video-description__style\">{this.state.mainVideoDisplay.description}</p>\r\n                    \r\n                        <section>\r\n                          <p className=\"comment__number\">{this.state.mainVideoDisplay.comments.length} Comments</p>\r\n                          <Comment />\r\n                          <CommentDisplay entry={this.state.mainVideoDisplay} />\r\n                        </section>\r\n                </div>\r\n            </div>\r\n            \r\n            {/* Section created solely for styling the Desktop layout purposes as content in the VideoList component. I tried using position absolute however I couldnt get the layout to stop jumping around, so i used display none   */}\r\n            {/* <section className=\"pseudo-videolist-container__style\">\r\n            <div className=\"videolist__content\">\r\n          <h2 className=\"nextvideo-title__style\">NEXT VIDEO</h2>\r\n          <div className=\"videolist__style\">\r\n            {this.videos.map((video) => {return (\r\n          (video.id!==this.props.videoId) ? \r\n            <div key={video.id} className=\"nextvideo__container\">\r\n                  <div className=\"nextvideo__flex\">\r\n                  <NavLink to={`/${video.id}`}>\r\n                    <img className=\"nextvideo__style\" src={video.image} width=\"140\" height=\"120\" />\r\n                  </NavLink>\r\n                     \r\n                      \r\n                    <div className=\"nextvideo-list-container\">\r\n                      <ul>\r\n                        <li className=\"nextvideo-desc__style\"\r\n                          key={video.id}>{video.title}\r\n                        </li>\r\n                        <li\r\n                        className=\"nextvideo-channel__style\">\r\n                          {video.channel}\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n              </div> : (\"\")   \r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n                </section> */}\r\n            </div>\r\n\r\n            </>\r\n                \r\n            )\r\n}\r\n}\r\n\r\nexport default mainVideoDisplay\r\n"]},"metadata":{},"sourceType":"module"}